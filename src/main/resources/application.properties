# Logging
quarkus.log.console.enable=true
quarkus.log.console.format=%d{yyyy-MM-dd HH:mm:ss} %-5p [%c{3.}]] (%t) %s%e%n
quarkus.log.console.level=DEBUG
quarkus.log.console.color=true

# The Kafka broker location (defaults to localhost:9092)
kafka.bootstrap.servers=localhost:9092

# Configuring the incoming channel (reading from Kafka)
mp.messaging.incoming.movies-in.connector=smallrye-kafka
mp.messaging.incoming.movies-in.topic=movies
mp.messaging.incoming.movies-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.movies-in.group.id=quarkus-with-kafka
# Se os registros Kafka devem ser despachados para vários consumidores
# Por padrão, um canal pode ser vinculado a um único consumidor, usando o método @Incoming ou o fluxo reativo @Channel.
# Na inicialização do aplicativo, os canais são verificados para formar uma cadeia de consumidores e produtores
# com um único consumidor e produtor
# Você pode substituir esse comportamento definindo mp.messaging.{Channel}.broadcast = true em um canal
mp.messaging.incoming.movies-in.broadcast=true
# Processar todos os registros de um tópico (desde o início)
mp.messaging.incoming.movies-in.auto.offset.reset=earliest

# Configuring the outgoing channel (writing to Kafka)
mp.messaging.outgoing.event-dlq.connector=smallrye-kafka
mp.messaging.outgoing.event-dlq.topic=dlq.movies
mp.messaging.outgoing.event-dlq.value.serializer=org.apache.kafka.common.serialization.StringSerializer
# Habilitar relatório de saúde
mp.messaging.outgoing.event-dlq.health-enabled=true
# Habilitar relatório de integridade de prontidão
mp.messaging.outgoing.event-dlq.health-readiness-enabled=true
mp.messaging.outgoing.event-dlq.acks=all
# Whether the client waits for Kafka to acknowledge the written record before acknowledging the message
mp.messaging.outgoing.event-dlq.waitForWriteCompletion=true

# Configuring the outgoing channel (writing to Kafka)
mp.messaging.outgoing.movies-out.connector=smallrye-kafka
mp.messaging.outgoing.movies-out.topic=movies
mp.messaging.outgoing.movies-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

# Advanced Configurations Kafka
# Se definido como um número positivo, o conector tentará reenviar qualquer registro que não tenha sido entregue
# com sucesso (com um erro potencialmente transitório) até que o número de novas tentativas seja alcançado.
# Se definido como 0, as tentativas são desativadas
mp.messaging.outgoing.movies-out.retries=2147483647
mp.messaging.outgoing.movies-out.acks=all
# O número máximo de mensagens a serem gravadas no Kafka simultaneamente.
# Ele limita o número de mensagens que aguardam para serem gravadas e reconhecidas pelo corretor.
# Você pode definir este atributo como 0 para remover o limite
mp.messaging.outgoing.movies-out.max-inflight-messages=5
# Se o cliente espera que Kafka confirme o registro escrito antes de reconhecer a mensagem
mp.messaging.outgoing.movies-out.waitForWriteCompletion=true

mp.messaging.outgoing.movies-out.compression.type=snappy
# O conector envia apenas essa quantidade de mensagens simultaneamente.
# Nenhuma outra mensagem será enviada até que pelo menos uma mensagem durante o voo seja reconhecida pelo corretor
mp.messaging.outgoing.movies-out.linger.ms=20
mp.messaging.outgoing.movies-out.batch.size=32768

# MongoDB
quarkus.mongodb.connection-string = mongodb://localhost:27017
quarkus.mongodb.database=kafka-consumer